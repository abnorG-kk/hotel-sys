{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactWorkspace\\\\hotel-sys\\\\src\\\\components\\\\frontOffice\\\\rooms\\\\Editable.js\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { useSelector, connect } from 'react-redux';\nimport { compose } from 'redux';\n\nfunction Editable() {\n  const {\n    useState\n  } = React;\n  const [columns, setColumns] = useState([{\n    title: 'Name',\n    field: 'name'\n  }, {\n    title: 'Surname',\n    field: 'id',\n    initialEditValue: 'initial edit value'\n  }, {\n    title: 'Birth Year',\n    field: 'brief',\n    type: 'numeric'\n  }, {\n    title: 'Birth Place',\n    field: 'birthCity',\n    lookup: {\n      34: 'İstanbul',\n      63: 'Şanlıurfa'\n    }\n  }]);\n  const room = useSelector(state => state.firestore.ordered.roomtype);\n  const data = room ? room.map(room => ({ ...room\n  })) : null;\n  const table = data ? /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Editable Preview\",\n    columns: columns,\n    data: data,\n    editable: {\n      onRowAdd: newData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          //setData([...data, newData]);\n          console.log(newData);\n          resolve();\n        }, 1000);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataUpdate = [...data];\n          const index = oldData.tableData.id;\n          dataUpdate[index] = newData; //setData([...dataUpdate]);\n\n          console.log(newData, oldData);\n          resolve();\n        }, 1000);\n      }),\n      onRowDelete: oldData => new Promise((resolve, reject) => {\n        setTimeout(() => {\n          const dataDelete = [...data];\n          const index = oldData.tableData.id;\n          dataDelete.splice(index, 1); //setData([...dataDelete]);\n\n          resolve();\n        }, 1000);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }\n  }, \"Loading\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, table);\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    createProject: project => dispatch(createProject(project))\n  };\n};\n\nexport default compose(connect(null, mapDispatchToProps), firestoreConnect([{\n  collection: 'roomtype'\n}]))(Editable);","map":{"version":3,"sources":["D:/ReactWorkspace/hotel-sys/src/components/frontOffice/rooms/Editable.js"],"names":["React","MaterialTable","firestoreConnect","useSelector","connect","compose","Editable","useState","columns","setColumns","title","field","initialEditValue","type","lookup","room","state","firestore","ordered","roomtype","data","map","table","onRowAdd","newData","Promise","resolve","reject","setTimeout","console","log","onRowUpdate","oldData","dataUpdate","index","tableData","id","onRowDelete","dataDelete","splice","mapDispatchToProps","dispatch","createProject","project","collection"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { useSelector, connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\n\r\n function Editable() {\r\n \r\n    const { useState } = React;\r\n    const [columns, setColumns] = useState([\r\n      { title: 'Name', field: 'name' },\r\n      { title: 'Surname', field: 'id', initialEditValue: 'initial edit value' },\r\n      { title: 'Birth Year', field: 'brief', type: 'numeric' },\r\n      {\r\n        title: 'Birth Place',\r\n        field: 'birthCity',\r\n        lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },\r\n      },\r\n    ]); \r\n    const room = useSelector(state => state.firestore.ordered.roomtype)\r\n    const data = room ? (room.map(room => ({...room}))) : (null)\r\n    const table = data ? (\r\n        <MaterialTable\r\n        title=\"Editable Preview\"\r\n        columns={columns}\r\n        data={data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                //setData([...data, newData]);\r\n                console.log(newData)\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                //setData([...dataUpdate]);\r\n                console.log(newData,oldData)\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                //setData([...dataDelete]);\r\n                \r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n      />\r\n    ) : (<div>Loading</div>)\r\n\r\n\r\n  \r\n\r\n  \r\n    return(\r\n        <div>\r\n             {table}\r\n        </div>\r\n       \r\n        )\r\n  }\r\n \r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createProject: (project) => dispatch(createProject(project))\r\n    }\r\n}\r\n  export default compose(connect(null,mapDispatchToProps),firestoreConnect([\r\n    {collection: 'roomtype'}\r\n  ])) (Editable)"]},"metadata":{},"sourceType":"module"}